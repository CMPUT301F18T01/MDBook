package com.example.mdbook;

import java.util.ArrayList;

class ElasticsearchController {

    // return singleton version of ElasticsearchController
    // (lazy singleton)
    public static ElasticsearchController getController() {
        return null;
    }


    // Adds a new user to either the patients or caregivers table depending on user type
    // throws exception if userID is taken
    public void createUser(User user) throws UserIDNotAvailableException {

    }

    // Adds a patients userID to a caregivers patient list
    public void addPatient(Caregiver caregiver, Patient patient) throws NoSuchUserException {

    }

    // updates user data, i.e. phone, email, userID
    // Throws error if user doesn't already exist in cloud storage,
    // if that is the case use createUser().
    public void saveUser(User user) throws NoSuchUserException {

    }

    // returns the full user object matching the given id
    // including records, problems etc
    public User getUser(String userID) throws NoSuchUserException {
        return(new Patient("id", "phone", "email"));
    }

    // should add problem with blank record reference and user reference
    // should also add problem id  to user problem id reference list
    // unique id for problem is autogenerated and returned
    public String addProblem(String userID, Problem problem) {
        return null;
    }

    // should add record with parent problem and parent userid references
    // should also add record id to user record id reference list
    // should also add record id to problem record id reference list
    // unique id for record is autogenerated and returned
    public String addRecord(String problemID, String userID, Record record) {
        return null;
    }

    // returns list of problems for given patientID
    // Patient ID is stored with an array of problem ID strings
    // Takes those string, looks them up in the problems table and generates list
    public ArrayList<Problem> getProblems(String patientID) {
        return null;
    }

    // returns userID of patient who owns given problem
    public String getPatientFromProblem(String problemID) {
        return null;
    }

    // returns all associated records for the given problem
    public ArrayList<String> getRecords(String problemID) {
        return null;
    }

    // returns userID of patient who owns the given record
    public String getPatientFromRecord(String recordID) {
        return null;
    }

    // returns combined list of records and parent problems of records with the given
    // geolocation
    public ArrayList<String> searchGeoLocation(GeoLocation geolocation) {
        return null;
    }

    // returns combined list of records and parent problems of records containing
    // keyword
    public ArrayList<String> searchKeyword(String keyWord) {
        return null;
    }

    // deletes all data belonging to the userID
    public void deleteUser(String userID) {
    }
}

